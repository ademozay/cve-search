package main

import (
	"fmt"
	"strings"
)

type VulnerabilitySearch struct {
	cve             CVE
	cpeSpec         string
	versionCheckers []VersionChecker
}

func NewVulnerabilitySearch(cve CVE, cpeSpec string) *VulnerabilitySearch {
	return &VulnerabilitySearch{
		cve:     cve,
		cpeSpec: cpeSpec,
	}
}

func (vs *VulnerabilitySearch) AddVersionChecker(vc VersionChecker) {
	if vc != nil {
		vs.versionCheckers = append(vs.versionCheckers, vc)
	}
}

func (vs *VulnerabilitySearch) Search(apps []Application) []Application {
	var vulnerableApps []Application

	for _, cveItem := range vs.cve.CVEItems {
		for _, node := range cveItem.Configurations.Nodes {
		matchLoop:
			for _, cpeMatch := range node.CPEMatch {
				if cpeMatch.Vulnerable {
					cpeParts := strings.Split(cpeMatch.CPE23Uri, ":")
					if len(cpeParts) < 5 { // invalid uri
						continue matchLoop
					}

					vulApp := Application{
						Vendor:  cpeParts[3],
						Name:    cpeParts[4],
						Version: cpeParts[5],
					}

				appLoop:
					for _, app := range apps {
						if cpeMatch.CPE23Uri == fmt.Sprintf("cpe:%s:a:%s:%s:%s:*:*:*:*:*:*:*", vs.cpeSpec, app.Vendor, app.Name, app.Version) {
							vulnerableApps = append(vulnerableApps, app)
							continue appLoop
						}

						if app.IsAny(vulApp) {
							for _, vc := range vs.versionCheckers {
								if vc.Vulnerable(app, vulApp) {
									vulnerableApps = append(vulnerableApps, app)
									continue appLoop
								}
							}
						}
					}
				}
			}
		}
	}

	return vulnerableApps
}
