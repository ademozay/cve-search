package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/ademozay/cve-search/internal/cve"
	"github.com/ademozay/cve-search/internal/host"
	"github.com/ademozay/cve-search/internal/search"
	"github.com/ademozay/cve-search/internal/version"
	"github.com/ademozay/cve-search/internal/version/calver"
	"github.com/ademozay/cve-search/internal/version/fallbackver"
	"github.com/ademozay/cve-search/internal/version/semver"
)

func main() {
	cveData, err := os.ReadFile("./db.json")
	if err != nil {
		log.Fatal(err)
	}

	hostApps, err := os.ReadFile("./host_apps.json")
	if err != nil {
		log.Fatal(err)
	}

	var localApps []host.Application

	err = json.Unmarshal(hostApps, &localApps)
	if err != nil {
		log.Fatal(err)
	}

	cve, err := cve.NewCVE(cveData)
	if err != nil {
		log.Fatal(err)
	}

	vulApps := cve.Parse()

	search := search.New()

	search.AddVersionChecker(version.SchemeSemVer, semver.NewChecker())
	search.AddVersionChecker(version.SchemeCalVer, calver.NewChecker())
	search.AddVersionChecker(version.SchemeNone, fallbackver.NewChecker())

	result := search.Search(vulApps, localApps)

	for _, err := range result.Failures {
		fmt.Printf("%v\n", err)
	}

	for _, app := range result.VulnerableApps {
		fmt.Printf("%v\n", app)
	}
}
