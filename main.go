package main

import (
	"encoding/json"
	"fmt"
	"os"
)

type Application struct {
	Name    string
	Vendor  string
	Version string
}

type CPEMatch struct {
	Vulnerable bool   `json:"vulnerable"`
	CPE23Uri   string `json:"cpe23Uri"`
}

type Node struct {
	Operator string     `json:"operator"`
	CPEMatch []CPEMatch `json:"cpe_match"`
}

type Configurations struct {
	Nodes []Node `json:"nodes"`
}

type CVEItem struct {
	Configurations Configurations `json:"configurations"`
}

type CVE struct {
	CVEItems []CVEItem `json:"CVE_Items"`
}

func main() {
	cveData, err := os.ReadFile("db.json")
	if err != nil {
		fmt.Println(err)
		return
	}

	apps := []Application{ // FIXME: read from file
		{
			Name:    "winrar",
			Vendor:  "rarlab",
			Version: "6.11",
		},
	}

	var cve CVE
	err = json.Unmarshal(cveData, &cve)
	if err != nil {
		fmt.Println(err)
		return
	}

	for _, cveItem := range cve.CVEItems {
		for _, node := range cveItem.Configurations.Nodes {
			for _, cpeMatch := range node.CPEMatch {
				if cpeMatch.Vulnerable {
					for _, app := range apps {
						if cpeMatch.CPE23Uri == fmt.Sprintf("cpe:2.3:a:%s:%s:%s:*:*:*:*:*:*:*", app.Vendor, app.Name, app.Version) {
							fmt.Printf("Application %s from %s with version %s is vulnerable.\n", app.Name, app.Vendor, app.Version)
						}
					}
				}
			}
		}
	}
}
