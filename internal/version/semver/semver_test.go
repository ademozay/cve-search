package semver

import (
	"testing"
)

func TestNewSemanticVersion(t *testing.T) {
	var tests = []struct {
		input    string
		expected *SemVer
	}{
		{"1.2.3", &SemVer{major: 1, minor: 2, patch: 3, preRelease: "", metadata: ""}},
		{"1.2.3-alpha", &SemVer{major: 1, minor: 2, patch: 3, preRelease: "alpha", metadata: ""}},
		{"1.2.3+build", &SemVer{major: 1, minor: 2, patch: 3, preRelease: "", metadata: "build"}},
		{"1.2.3-alpha+build", &SemVer{major: 1, minor: 2, patch: 3, preRelease: "alpha", metadata: "build"}},
		{"1.2.3-alpha.1+build.11.e0f985a", &SemVer{major: 1, minor: 2, patch: 3, preRelease: "alpha.1", metadata: "build.11.e0f985a"}},
	}

	for _, test := range tests {
		t.Run(test.input, func(t *testing.T) {
			actual, err := New(test.input)
			if err != nil {
				t.Errorf("got error: %s", err)
			}

			if actual.major != test.expected.major {
				t.Errorf("got %v, want %v", actual.major, test.expected.major)
			}

			if actual.minor != test.expected.minor {
				t.Errorf("got %v, want %v", actual.minor, test.expected.minor)
			}

			if actual.patch != test.expected.patch {
				t.Errorf("got %v, want %v", actual.patch, test.expected.patch)
			}

			if actual.preRelease != test.expected.preRelease {
				t.Errorf("got %v, want %v", actual.preRelease, test.expected.preRelease)
			}

			if actual.metadata != test.expected.metadata {
				t.Errorf("got %v, want %v", actual.metadata, test.expected.metadata)
			}

		})
	}
}
