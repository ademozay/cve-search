package calver

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/ademozay/cve-search/internal/cve"
	"github.com/ademozay/cve-search/internal/host"
)

type CalVer struct {
	year  int
	month int
	day   int
	build string
}

func New(ver string) (*CalVer, error) {
	parts := strings.Split(ver, ".")

	if len(parts) < 3 {
		return nil, fmt.Errorf("invalid version")
	}

	year, err := strconv.Atoi(parts[0])
	if err != nil {
		return nil, fmt.Errorf("invalid year")
	}

	month, err := strconv.Atoi(parts[1])
	if err != nil {
		return nil, fmt.Errorf("invalid month")
	}

	day, err := strconv.Atoi(parts[2])
	if err != nil {
		return nil, fmt.Errorf("invalid day")
	}

	var build string

	if len(parts) > 3 {
		build = strings.Join(parts[3:], ".")
	}

	return &CalVer{year, month, day, build}, nil
}

type Checker struct{}

func NewChecker() *Checker {
	return &Checker{}
}

func (c *Checker) Vulnerable(localApp host.Application, vulApp cve.VulnerableApp) (bool, error) {
	currVer, err := New(localApp.Version)
	if err != nil {
		return false, fmt.Errorf("failed to parse current version: %w", err)
	}

	currDate := time.Date(currVer.year, time.Month(currVer.month), currVer.day, 0, 0, 0, 0, time.UTC)

	parseDate := func(dateStr string) (time.Time, error) {
		return time.Parse("2006.01.02", dateStr)
	}

	if vulApp.VersionStartIncluding != "" {
		vulStartDate, err := parseDate(vulApp.VersionStartIncluding)
		if err != nil {
			return false, fmt.Errorf("failed to parse versionStartIncluding: %w", err)
		}

		if currDate.Before(vulStartDate) {
			return false, nil
		}
	}

	if vulApp.VersionEndIncluding != "" {
		vulEndDate, err := parseDate(vulApp.VersionEndIncluding)
		if err != nil {
			return false, fmt.Errorf("failed to parse versionEndIncluding: %w", err)
		}

		if currDate.After(vulEndDate) {
			return false, nil
		}
	}

	if vulApp.VersionStartExcluding != "" {
		vulStartDate, err := parseDate(vulApp.VersionStartExcluding)
		if err != nil {
			return false, fmt.Errorf("failed to parse versionStartExcluding: %w", err)
		}

		if currDate.Before(vulStartDate) {
			return false, nil
		}
	}

	if vulApp.VersionEndExcluding != "" {
		vulEndDate, err := parseDate(vulApp.VersionEndExcluding)
		if err != nil {
			return false, fmt.Errorf("failed to parse versionEndExcluding: %w", err)
		}

		if currDate.After(vulEndDate) {
			return false, nil
		}
	}

	return true, nil
}
