package version

import (
	"regexp"
	"strconv"
	"time"
)

type VersionScheme string

const (
	SchemeSemVer VersionScheme = "semver"
	SchemeCalVer VersionScheme = "calver"
	SchemeNone   VersionScheme = "none"
)

var (
	semverRegex   = `^v?(\d+)\.(\d+)(\.\d+)?(-[\da-zA-Z\-]+(\.[\da-zA-Z\-]+)*)?(\+[\da-zA-Z\-]+(\.[\da-zA-Z\-]+)*)?$`
	semverPattern = regexp.MustCompile(semverRegex)
	calverRegex   = `^(\d{2,4})\.(\d{1,2})\.(\d{1,2})(\.\d+)?(-[\da-zA-Z\-]+(\.[\da-zA-Z\-]+)*)?(\+[\da-zA-Z\-]+(\.[\da-zA-Z\-]+)*)?$`
	calverPattern = regexp.MustCompile(calverRegex)
)

func Scheme(versions ...string) VersionScheme {
	for _, version := range versions {
		if version == "*" || version == "-" || version == "" {
			continue
		}

		if calverPattern.MatchString(version) {
			calverParts := calverPattern.FindStringSubmatch(version)
			year, err := strconv.Atoi(calverParts[1])
			if err != nil {
				continue
			}

			_, err = strconv.Atoi(calverParts[2])
			if err != nil {
				continue
			}

			_, err = strconv.Atoi(calverParts[3])
			if err != nil {
				continue
			}

			currYear := time.Now().Year()
			if year >= 1973 && year <= currYear {
				return SchemeCalVer
			}
		}

		if semverPattern.MatchString(version) {
			return SchemeSemVer
		}
	}

	return SchemeNone
}
