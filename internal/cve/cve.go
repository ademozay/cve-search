package cve

import (
	"encoding/json"
	"fmt"
	"strings"
)

type CPEMatch struct {
	Vulnerable            bool   `json:"vulnerable"`
	CPE23Uri              string `json:"cpe23Uri"`
	VersionStartIncluding string `json:"versionStartIncluding"`
	VersionEndIncluding   string `json:"versionEndIncluding"`
	VersionStartExcluding string `json:"versionStartExcluding"`
	VersionEndExcluding   string `json:"versionEndExcluding"`
}

type Node struct {
	Operator string     `json:"operator"`
	CPEMatch []CPEMatch `json:"cpe_match"`
}

type Configurations struct {
	Nodes []Node `json:"nodes"`
}

type CVEDataMeta struct {
	ID string `json:"ID"`
}

type CVEData struct {
	Meta CVEDataMeta `json:"CVE_data_meta"`
}

type CVEItem struct {
	Configurations Configurations `json:"configurations"`
	CVEData        CVEData        `json:"cve"`
}

type CVE struct {
	CVEItems []CVEItem `json:"CVE_Items"`
}

func NewCVE(data []byte) (*CVE, error) {
	var cve CVE
	err := json.Unmarshal(data, &cve)
	if err != nil {
		return nil, err
	}
	return &cve, nil
}

func (vs *CVE) Parse(spec string) []VulnerableApp {
	var vulnerableApps []VulnerableApp

	for _, cveItem := range vs.CVEItems {
		for _, node := range cveItem.Configurations.Nodes {
		matchLoop:
			for _, cpeMatch := range node.CPEMatch {
				if cpeMatch.Vulnerable && strings.HasPrefix(cpeMatch.CPE23Uri, fmt.Sprintf("cpe:%s:a", spec)) {
					cpeParts := strings.Split(cpeMatch.CPE23Uri, ":")
					if len(cpeParts) < 5 { // invalid uri
						continue matchLoop
					}

					vulApp := VulnerableApp{
						Vendor:                cpeParts[3],
						Name:                  cpeParts[4],
						Version:               cpeParts[5],
						Os:                    cpeParts[10],
						VersionStartIncluding: cpeMatch.VersionStartIncluding,
						VersionEndIncluding:   cpeMatch.VersionEndIncluding,
						VersionStartExcluding: cpeMatch.VersionStartExcluding,
						VersionEndExcluding:   cpeMatch.VersionEndExcluding,
					}

					vulnerableApps = append(vulnerableApps, vulApp)
				}
			}
		}
	}

	return vulnerableApps
}
