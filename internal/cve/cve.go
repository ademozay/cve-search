package cve

import (
	"encoding/json"
	"strings"
)

type CPEMatch struct {
	Vulnerable            bool   `json:"vulnerable"`
	CPE23Uri              string `json:"cpe23Uri"`
	VersionStartIncluding string `json:"versionStartIncluding"`
	VersionEndIncluding   string `json:"versionEndIncluding"`
	VersionStartExcluding string `json:"versionStartExcluding"`
	VersionEndExcluding   string `json:"versionEndExcluding"`
}

type Node struct {
	Operator string     `json:"operator"`
	CPEMatch []CPEMatch `json:"cpe_match"`
	Children []Node     `json:"children"`
}

type Configurations struct {
	Nodes []Node `json:"nodes"`
}

type CVEDataMeta struct {
	ID string `json:"ID"`
}

type CVEData struct {
	Meta CVEDataMeta `json:"CVE_data_meta"`
}

type CVEItem struct {
	Configurations Configurations `json:"configurations"`
	CVEData        CVEData        `json:"cve"`
}

type CVE struct {
	CVEItems []CVEItem `json:"CVE_Items"`
}

func NewCVE(data []byte) (*CVE, error) {
	var cve CVE
	err := json.Unmarshal(data, &cve)
	if err != nil {
		return nil, err
	}
	return &cve, nil
}

func (vs *CVE) Parse() []VulnerableApp {
	var vulnerableApps []VulnerableApp

	for _, cveItem := range vs.CVEItems {
		for _, node := range cveItem.Configurations.Nodes {
			processNode(node, cveItem, &vulnerableApps)
		}
	}

	return vulnerableApps
}

func processNode(node Node, cveItem CVEItem, vulnerableApps *[]VulnerableApp) {
	for _, cpeMatch := range node.CPEMatch {
		if cpeMatch.Vulnerable && strings.HasPrefix(cpeMatch.CPE23Uri, "cpe:2.3:a") {
			cpeParts := strings.Split(cpeMatch.CPE23Uri, ":")
			if len(cpeParts) < 5 { // invalid uri
				continue
			}

			*vulnerableApps = append(*vulnerableApps, createVulApp(cpeMatch, cveItem))
		}
	}

	for _, child := range node.Children {
		processNode(child, cveItem, vulnerableApps)
	}
}

func createVulApp(cpeMatch CPEMatch, cveItem CVEItem) VulnerableApp {
	cpeParts := strings.Split(cpeMatch.CPE23Uri, ":")
	vulApp := VulnerableApp{
		ID:                    cveItem.CVEData.Meta.ID,
		Vendor:                cpeParts[3],
		Name:                  cpeParts[4],
		Version:               cpeParts[5],
		Os:                    cpeParts[10],
		VersionStartIncluding: cpeMatch.VersionStartIncluding,
		VersionEndIncluding:   cpeMatch.VersionEndIncluding,
		VersionStartExcluding: cpeMatch.VersionStartExcluding,
		VersionEndExcluding:   cpeMatch.VersionEndExcluding,
	}

	return vulApp
}
