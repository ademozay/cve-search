package host

import (
	"encoding/json"
	"strings"
	"unicode"

	"github.com/ademozay/cve-search/internal/cve"
)

type Application struct {
	Vendor        string   `json:"vendor"`
	Name          string   `json:"name"`
	Version       string   `json:"version"`
	VendorAliases []string `json:"vendorAliases"`
	NameAliases   []string `json:"nameAliases"`
}

func NewApplication(vendor, name, version string, vendorAliases, nameAliases []string) Application {
	var vendorAlias []string
	for _, alias := range vendorAliases {
		vendorAlias = append(vendorAlias, normalize(alias))
	}

	var nameAlias []string
	for _, alias := range nameAliases {
		nameAlias = append(nameAlias, normalize(alias))
	}

	return Application{
		Vendor:        normalize(vendor),
		Name:          normalize(name),
		Version:       normalize(version),
		VendorAliases: vendorAlias,
		NameAliases:   nameAlias,
	}
}

func (app *Application) UnmarshalJSON(data []byte) error {
	var rawApp struct {
		Vendor        string   `json:"vendor"`
		Name          string   `json:"name"`
		Version       string   `json:"version"`
		VendorAliases []string `json:"vendorAliases"`
		NameAliases   []string `json:"nameAliases"`
	}

	if err := json.Unmarshal(data, &rawApp); err != nil {
		return err
	}

	*app = NewApplication(
		rawApp.Vendor,
		rawApp.Name,
		rawApp.Version,
		rawApp.VendorAliases,
		rawApp.NameAliases,
	)

	return nil
}

func (app Application) Is(otherApp cve.VulnerableApp) bool {
	return app.Any(otherApp) && app.Version == otherApp.Version
}

// Any checks if app is any version of otherApp
func (app Application) Any(otherApp cve.VulnerableApp) bool {
	return app.VendoredBy(otherApp.Vendor) && app.Named(otherApp.Name)
}

func (app Application) VendoredBy(vendor string) bool {
	if app.Vendor == vendor {
		return true
	}

	for _, alias := range app.VendorAliases {
		if alias == vendor {
			return true
		}
	}

	return false
}

func (app Application) Named(name string) bool {
	if app.Name == name {
		return true
	}

	for _, alias := range app.NameAliases {
		if alias == name {
			return true
		}
	}

	return false
}

func normalize(s string) string {
	var builder strings.Builder
	for _, r := range s {
		switch {
		case r == ' ':
			builder.WriteRune('_')
		default:
			builder.WriteRune(unicode.ToLower(r))
		}
	}
	return builder.String()
}
